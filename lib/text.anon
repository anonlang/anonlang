alias text [
  alias chars character-group [
    size 0
    encoding 'utf-8'
  ]

  alias size chars.size

  ;;alias letters 'abcdefghijklmnopqrstuvwxyz'
  alias digits '0123456789'
  ;;alias hexdigits '0123456789abcdef'
  alias whitespace ' \n\r\t\v\f'


  [; Return index of first match, otherwise -1. ;]
  alias find [
    input match-text
    output ;; TODO
  ]
  [; Return indexes of all matches, otherwise empty number-group. ;]
  alias find-all [
    input match-text
    output ;; TODO
  ]
  alias format [
    input args
    output ;; TODO
  ]
  [; Return true if a match is found, otherwise false. ;]
  alias is-contain [
    input match-text
    output ;; TODO
  ]
  [; Return true if this text is a valid number, otherwise false. ;]
  alias is-number [
    ;; First char is optionally a dash
    ;; Up to one period allowed. ;; TODO: Need to consider i18n?
    ;; All other characters should be a digit. ;; TODO: Support scientific notation? And, ignore optional/clarifying underscores?
    output ;; TODO
  ]
  [; Return true if size is 0, otherwise false. ;]
  alias is-empty [
    output size == 0
  ]
  [; Return true if this text's ending matches the input, otherwise false. ;]
  alias is-end-with [
    input match-text
    output ;; TODO
  ]
  [; Return true if this text is the same forward and backwards, otherwise false. ;]
  alias is-palindrome [
    mid = size / 2
    loop i in 0..mid [
      if chars.i != chars[size - 1 - i] output false
    ]
    output true
  ]
  [; Return true if this text's starting matches the input, otherwise false. ;]
  alias is-start-with [
    input match-text
    if match-text.size > size output false
    loop i in 0..match-text.size [
      if match-text.i != chars.i output false
    ]
    output true
  ]
  [; Return text with each text in input group appended. ;]
  alias join [
    input text-group separator-text='' start-text='' end-text=''
    t-output
    loop t in text-group [
      t-output ++= t
    ]
    output t-output
  ]
  ;; TODO: Why is last-index-of needed? Do other functions cover the use cases?
  alias last-index-of [
    input match-text
    output ;; TODO
  ]
  [; Return text that is all lowercase. ;]
  alias lower [
    output ;; TODO
  ]
  alias parse [
    input regex
    output split regex
  ]
  [; Return this text repeated count times. ;]
  alias repeat [
    input count
    output ;; TODO
  ]
  alias replace [
    input match-text new-text
    output ;; TODO
  ]
  alias replace-all [
    input match-text new-text
    output ;; TODO
  ]
  ;; TODO: Could alternative syntax be text[size..0]?
  alias reverse [
    text-output
    loop i in 0..size [
      text-output ++= chars[size - 1 - i]
    ]
    output text-output
  ]
  alias split [
    input regex=' '
    text-group-output
    loop i in 0..size [
      if chars[i..] is-start-with regex
    ]
    output text-group-output
  ]
  ;; TODO: Should negative index be allowed, like in Python and JavaScript?
  ;; TODO: Should index greater than size automatically be converted to size?
  ;; TODO: Better name?
  ;; Alternative syntax is to use text[start..stop].
  alias subtext [
    input start stop=size
    output ;; TODO
  ]
  ;; alias to-json [] ;; Use json-text lib instead.
  ;; alias to-xml [] ;; Use xml-text lib instead.
  alias trim [
    start, stop
    loop i in 0..size && chars.i.is-whitespace [
      start = i
    ]
    loop i in [size - 1]..0 && chars.i.is-whitespace [
      stop = i
    ]
    if start < stop output chars[start..stop]
    output ''
  ]
  [; Return text that is all uppercase. ;]
  alias upper [
    output ;; TODO
  ]
]
