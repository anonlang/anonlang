;; Work-in-progress.
;; TODO: pascal-triangle, combination, permutation, matrix manipulation

alias e 2.718281828459045
alias pi 3.141592653589793

alias abs [
  input a
  output if a < 0 -a a
]

alias gcd [
  input a b
  output if b == 0 a gcd [b, a % b]
]

alias hypot [
  input num-group
  alias s
  loop i in num-group [
    s += i.pow 2
  ]
  [; Alternatively
  num-group [
    map i -> i.pow 2
  ].sum.root 2
  ;]
  input s.root 2
]

alias ln [
  input a
  output log [e, a]
]

alias log [
  input base=10 a
  output a ;; TODO
]

alias max [
  input a b
  output if a > b a b
]

alias min [
  input a b
  output if a < b a b
]

;; Alternatively, use `number.pow number`
alias pow [
  input a b
  output a.pow b
]

;; Alternatively, use `number.root number`
alias root [
  input a b
  output a.root b
]

alias solve [
  input e v o
  output ;; TODO
]

[; Should use num-group.sum instead.
;; Alternatively, use `number.add number`
alias sum [
  input num-group
  sum 0
  loop num num-group [
    sum += num
  ]
  output sum
]
;]

alias is-prime [
  input num
  output
]

;; Sequence of 1,1,2,3,5,8,13..
alias fib [
  input index
  prev 1
  val 0
  loop index [
    temp = val
    val = val + prev
    prev = val
  ]
  output val
]

[; TODO

alias count-combinations [
  input n c
  output
]

alias count-permutations [
  input n c
  output
]

;; Maybe also have a round-up, round-down, round-even? Not for v1. Rounding up and down could be confusing for negative numbers. Maybe use round-to-zero? round-to-infinity?
alias round [
  input num place=1
  output
]

alias round-to-even [
  input num place=1
  output
]

alias sin [
  input d
  output
]

alias cos [
  input d
  output
]

alias tan [
  input d
  output
]
;]
